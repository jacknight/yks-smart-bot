const { Command } = require("discord-akairo");
const axios = require("axios");

class KickstarterCommand extends Command {
  allowRetry = new Set();

  constructor() {
    super("kickstarter", {
      aliases: ["kickstarter"],
      cooldown: 1000 * 60 * 60 * 24, // once per day
      ratelimit: 1,
      args: [{ id: "name", match: "content" }],
      ignoreCooldown: (message, command) => {
        return (
          message.member.id === "329288617564569602" ||
          this.allowRetry.has(message.member.id)
        );
      },
    });
  }

  async exec(message, { name }) {
    if (name.length > 80) {
      this.allowRetry.add(message.member.id);
      return message.channel.send("Shorten it up, please.");
    }
    // First, we run it through the content filter to be responsible users of AI
    const contentFilterResult = await contentFilter(name);
    if (contentFilterResult === "2") {
      this.allowRetry.add(message.member.id, true);
      return message.channel.send("Sorry, the response was too offensive.");
    }

    this.allowRetry.delete(message.member.id);

    // Prompt passed muster, go ahead with our fine tuned model.
    const response = await sendRequest(
      "https://api.openai.com/v1/completions",
      "post",
      {
        prompt: `**Name**: ${name}`,
        model: "curie:ft-yks-smart-bot-2021-08-04-13-59-00",
        maxTokens: 200,
        temperature: 0.7,
        topP: 1,
        presencePenalty: 0,
        frequencyPenalty: 0,
        bestOf: 1,
        n: 1,
        stream: false,
        stop: ["###"],
        echo: false,
        user: message.member.id,
      }
    );

    const completion = response.data.choices[0].text;
    const split = completion.split("\n");
    const title = name + split[0];
    const category = completion.match(/\*\*Category\*\*: (.*)/);
    const status = completion.match(/\*\*Status\*\*: (.*)/);
    const backers = completion.match(/\*\*Backers\*\*: (.*)/);
    const pledged = completion.match(/\*\*Pledged\*\*: (.*)/);
    const goal = completion.match(/\*\*Goal\*\*: (.*)/);
    const author = completion.match(/\*\*Creator\*\*: (.*)/);
    const description = completion.match(/\*\*Description\*\*: (.*)/);
    if (
      title &&
      category &&
      status &&
      backers &&
      pledged &&
      goal &&
      author &&
      description
    ) {
      const embed = {
        color:
          status[1] === "successful"
            ? 0x83c133
            : status[1] === "failed" || status[1] === "canceled"
            ? 0xff0000
            : 0x0000ff,
        title,
        description: description[1],
        fields: [
          {
            name: "Creator",
            value: author[1],
          },
          {
            name: "Category",
            value: category[1],
          },
          {
            name: "Status",
            value: status[1],
          },
          {
            name: "Backers",
            value: backers[1],
          },
          {
            name: "Pledged",
            value: pledged[1],
          },
          {
            name: "Goal",
            value: goal[1],
          },
        ],
        footer: {
          text: "Output generated by GPT-3",
        },
      };
      return message.channel.send({ embed });
    } else {
      console.log(
        completion,
        title,
        category,
        status,
        backers,
        pledged,
        goal,
        author,
        description
      );
      return message.channel.send("Something went wrong");
    }
  }
}

const sendRequest = (url, method, opts = {}) => {
  let camelToUnderscore = (key) => {
    let result = key.replace(/([A-Z])/g, " $1");
    return result.split(" ").join("_").toLowerCase();
  };

  const data = {};
  for (const key in opts) {
    data[camelToUnderscore(key)] = opts[key];
  }

  return axios({
    url,
    headers: {
      Authorization: `Bearer ${process.env.OPENAI_KEY}`,
      "Content-Type": "application/json",
    },
    data: Object.keys(data).length ? data : "",
    method,
  });
};

const contentFilter = async (name) => {
  // This is the probability at which we evaluate that a "2" is likely real
  // vs. should be discarded as a false positive
  toxicThreshold = -0.355;

  let prompt = "<|endoftext|>";

  prompt += ` **Name**: Beautiful Things
**Creator**: Paige Polk
**Description**: A queer love story touched by motherhood and self-doubt with a Brooklyn backdrop.
**Category**: film & video/romance
**Status**: failed
**Backers**: 80
**Pledged**: 4215
**Goal**: 24953

###

**Name**: ${name}`;

  prompt += "\n--\nLabel:";

  const response = await sendRequest(
    "https://api.openai.com/v1/engines/content-filter-alpha-c4/completions",
    "post",
    {
      prompt,
      maxTokens: 1,
      temperature: 0,
      topP: 1,
      presencePenalty: 0,
      frequencyPenalty: 0,
      logprobs: 10,
    }
  );

  let flag = response.data.choices[0].text;
  // A response of "2" means potentially inappropriate content. Double check it
  if (flag == "2") {
    logprobs = response.data.choices[0].logprobs.top_logprobs[0];
    let flag0 = logprobs["0"];
    let flag1 = logprobs["1"];
    let flag2 = logprobs["2"];
    if (flag2 < toxicThreshold) {
      if (flag1 && flag0) {
        if (flag0 > flag1) {
          flag = flag0;
        } else {
          flag = flag1;
        }
      } else if (flag0) {
        flag = flag0;
      } else if (flag1) {
        flag = flag1;
      }
    }
  } else if ((flag !== "0") & (flag !== "1")) {
    flag = 2;
  }

  return flag;
};
module.exports = KickstarterCommand;
